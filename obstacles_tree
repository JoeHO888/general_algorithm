#unfinished

import matplotlib.pyplot as plt
import numpy as np
import math

mutation_rate=0.01
crossover_rate=0.8
pop_size=1000
generation=100
DNA_length=10

def fitness(pop):
       return abs(sum(np.sin(pop).T))
      #return sum(np.cos(pop).T)**2+sum(np.sin(pop).T)**2

def select(pop):
    index=np.random.choice(pop_size, pop_size, replace=True,p=fitness(pop)/fitness(pop).sum()) #problematic
    return np.array([pop[i] for i in index]) 


def crossover(dad,pop): 
        for i in range(len(dad)):
            if np.random.uniform(0,1,1)<crossover_rate:
                crosspoint=np.random.randint(0,DNA_length,size=1)[0]
                j=np.random.randint(0,pop_size,size=1)[0]
                dad[i,crosspoint:]=pop[j,crosspoint:]
        return dad

def mutate(pop):
        for e in pop:
            for i in range(DNA_length):
                  if np.random.uniform(0,1,1)<mutation_rate:
                        e[i]=np.random.uniform(-math.pi,math.pi)
        return pop


population=np.random.uniform(-math.pi,math.pi,size=(pop_size, DNA_length))


for gen in range(generation):
    dad = select(population)
    children = crossover(dad,population)
    population = mutate(children)
    print("Best one of generation {}:".format(gen+1))
    best = population[np.argmax(fitness(population))]
    print("fitness: " + str(fitness(best)))
    temp_x = np.cos(best)
    temp_y = np.sin(best)
    best_x = [0]
    best_y = [0]
    for i in range(DNA_length):
        best_x.append(sum(temp_x[:i+1]))
        best_y.append(sum(temp_y[:i+1]))
    axes = plt.gca()
    axes.set_xlim([-DNA_length,DNA_length])
    axes.set_ylim([-DNA_length,DNA_length])
    #plt.figure(figsize=(20,10))
    plt.plot(best_x, best_y,linewidth=0.5)
    plt.show() 
    
    
